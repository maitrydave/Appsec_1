Crash1
Since 'malloc' call uses ret_val->num_bytes, which is read directly from the input file it most likely that without validating. Here in program, we allocate number of bytes with user input and giving malloc space. But it also accepts negative number or huge block of memory, and technically it cannot allocate negative space or fulfill such a large memory allocation request. So as a result, it will crash.
gift_card_reader(), reads a 4-byte value in `ret_val->num_bytes`.
when this value is negative then it gets interpreted as a large unsigned integer due to type conversion.
this large number is close to 4 GB which results in Segmentation Fault

The bug behind crash1.gft was passing a a very big positive number of bytes in the giftcard
in the first 4 bytes. this results a negative num_bytes when read and in malloc returning a null pointer and subsequently crashing the program in the next fread call.

Crash2
We create an animated message record containing a custom program designed to trigger out-of-bounds memory access. This is achieved through the instruction \x01\x2f, with \x01 . regs is an array of 16 size so when args 1 and 2 are out of size it can cause the program to crash as program may try to access the data beyond the max array size.
reg is an array of size 16. If arg1 is not between 0 and 15, the program might read or write where it shouldn't.
This could change memory addresses and cause the program to crash.

The bug behind crash2.gft was passing a number much greater than 16 in the program buffer inside animate
function, for instruction opcode 0x01. this when the program tries to load *mptr(msg pointer) into register[number greater than 16] would cause segmentation fault.

Hang
We created the program begins with \x09\xfd ro positive jump to more than 256 which instructs opcode for a jump instruction and instructs counter to jump lading to an infinte loop.
The program starts with bytecode \x09\xfd, a positive jump instruction that exceeds 256.
This opcode for jump causes the counter to jump in an infinite loop.
        -:    0:Source:./giftcardreader.c
        -:    0:Graph:giftcardreader.gcno
        -:    0:Data:giftcardreader.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Gift Card Reading Application
        -:    3: * Original Author: Shoddycorp's Cut-Rate Contracting
        -:    4: * Comments added by: Justin Cappos (JAC) and Brendan Dolan-Gavitt (BDG)
        -:    5: * Maintainer:
        -:    6: * Date: 8 July 2020
        -:    7: */
        -:    8:
        -:    9:
        -:   10:#include "giftcard.h"
        -:   11:
        -:   12:#include <stdio.h>
        -:   13:#include <string.h>
        -:   14:#include <unistd.h>
        -:   15:#include <limits.h> // For INT_MAX
        -:   16:#define MAX_MESSAGE_LENGTH 32
        -:   17:
        -:   18:
        -:   19:// fuzzer1 fix 
        1:   20:void check_null_terminated_or_exit(const char* message) {
        1:   21:    int found_null_terminator = 0;
       32:   22:    for (int i = 0; i < MAX_MESSAGE_LENGTH; ++i) {
       32:   23:        if (message[i] == '\0') {
        1:   24:            found_null_terminator = 1;
        1:   25:            break;
        -:   26:        }
       31:   27:    }
        1:   28:    if (!found_null_terminator) {
        -:   29:        // fprintf(stderr, "Error: Message is not null-terminated.\n");
    #####:   30:        exit(1);  
        -:   31:    }
        1:   32:}
        -:   33:// .,~==== interpreter for THX-1138 assembly ====~,.
        -:   34://
        -:   35:// This is an emulated version of a microcontroller with
        -:   36:// 16 registers, one flag (the zero flag), and display
        -:   37:// functionality. Programs can operate on the message
        -:   38:// buffer and use opcode 0x07 to update the display, so
        -:   39:// that animated greetings can be created.
        1:   40:void animate(char *msg, unsigned char *program) {
        -:   41:    unsigned char regs[16];
        1:   42:    char *mptr = msg; // TODO: how big is this buffer?
        1:   43:    unsigned char *pc = program;
        1:   44:    int i = 0;
        1:   45:    int zf = 0;
        2:   46:    while (pc < program+256) {
        -:   47:        unsigned char op, arg1, arg2;
        2:   48:        op = *pc;
        2:   49:        arg1 = *(pc+1);
        2:   50:        arg2 = *(pc+2);
        -:   51:
        -:   52:
        -:   53:        // fuzzer2 fix 
        -:   54:        // Ensure arg1 and arg2 are within bounds before proceeding
        2:   55:        if (arg1 >= 16 || arg2 >= 16) {
        -:   56:            // fprintf(stderr, "Register index out of bounds: %d, %d\n", arg1, arg2);
        1:   57:            exit(1);
        -:   58:        }
        1:   59:        switch (*pc) {
        -:   60:            case 0x00:
        1:   61:                break;
        -:   62:            case 0x01: 
    #####:   63:                if (arg1 < 16) {
    #####:   64:                    regs[arg1] = *mptr;
    #####:   65:                } else {
    #####:   66:                    fprintf(stderr, "Wrong Register Number: %d\n", arg1);
    #####:   67:                    exit(1);
        -:   68:                }
    #####:   69:                break;
        -:   70:            case 0x02:
    #####:   71:                *mptr = regs[arg1];
    #####:   72:                break;
        -:   73:            case 0x03:
    #####:   74:                mptr += (char)arg1;
    #####:   75:                break;
        -:   76:            case 0x04:
    #####:   77:                regs[arg2] = arg1;
    #####:   78:                break;
        -:   79:            case 0x05:
    #####:   80:                regs[arg1] ^= regs[arg2];
    #####:   81:                zf = !regs[arg1];
    #####:   82:                break;
        -:   83:            case 0x06:
    #####:   84:                regs[arg1] += regs[arg2];
    #####:   85:                zf = !regs[arg1];
    #####:   86:                break;
        -:   87:            case 0x07:
    #####:   88:                puts(msg);
    #####:   89:                break;
        -:   90:            case 0x08:
    #####:   91:                goto done;
        -:   92:            case 0x09:
        -:   93:            
    #####:   94:                if ((signed char)arg1 < 0 && pc - program < (unsigned char)arg1) {
    #####:   95:                    fprintf(stderr, "Jump beyond start(neg): %d\n", (signed char)arg1);
    #####:   96:                    exit(1);
    #####:   97:                } else if ((signed char)arg1 > 0 && program + 256 - pc <= (unsigned char)arg1) {
    #####:   98:                    fprintf(stderr, "Jump beyond end(positive): %d\n", (signed char)arg1);
    #####:   99:                    exit(1);
        -:  100:                }
    #####:  101:                pc += (signed char)arg1; 
    #####:  102:                break; 
        -:  103:            case 0x10:
    #####:  104:                if (zf) pc += (char)arg1;
    #####:  105:                break;
        -:  106:        }
        1:  107:        pc+=3;
        -:  108:#ifndef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
        -:  109:        // Slow down animation to make it more visible (disabled if fuzzing)
        1:  110:        usleep(5000);
        -:  111:#endif
        -:  112:    }
        -:  113:done:
    #####:  114:    return;
        -:  115:}
        -:  116:
    #####:  117:int get_gift_card_value(struct this_gift_card *thisone) {
        -:  118:	struct gift_card_data *gcd_ptr;
        -:  119:	struct gift_card_record_data *gcrd_ptr;
        -:  120:	struct gift_card_amount_change *gcac_ptr;
    #####:  121:	int ret_count = 0;
        -:  122:
    #####:  123:	gcd_ptr = thisone->gift_card_data;
    #####:  124:	for(int i=0;i<gcd_ptr->number_of_gift_card_records; i++) {
    #####:  125:  		gcrd_ptr = (struct gift_card_record_data *) gcd_ptr->gift_card_record_data[i];
    #####:  126:		if (gcrd_ptr->type_of_record == 1) {
    #####:  127:			gcac_ptr = gcrd_ptr->actual_record;
    #####:  128:			ret_count += gcac_ptr->amount_added;
    #####:  129:		}
    #####:  130:	}
    #####:  131:	return ret_count;
        -:  132:}
        -:  133:
        1:  134:void print_gift_card_info(struct this_gift_card *thisone) {
        -:  135:	struct gift_card_data *gcd_ptr;
        -:  136:	struct gift_card_record_data *gcrd_ptr;
        -:  137:	struct gift_card_amount_change *gcac_ptr;
        -:  138:    struct gift_card_program *gcp_ptr;
        -:  139:
        1:  140:	gcd_ptr = thisone->gift_card_data;
        1:  141:	printf("   Merchant ID: %32.32s\n",gcd_ptr->merchant_id);
        1:  142:	printf("   Customer ID: %32.32s\n",gcd_ptr->customer_id);
        1:  143:	printf("   Num records: %d\n",gcd_ptr->number_of_gift_card_records);
        1:  144:	for(int i=0;i<gcd_ptr->number_of_gift_card_records; i++) {
        2:  145:  		gcrd_ptr = (struct gift_card_record_data *) gcd_ptr->gift_card_record_data[i];
        2:  146:		if (gcrd_ptr->type_of_record == 1) {
    #####:  147:			printf("      record_type: amount_change\n");
    #####:  148:			gcac_ptr = gcrd_ptr->actual_record;
    #####:  149:			printf("      amount_added: %d\n",gcac_ptr->amount_added);
    #####:  150:			if (gcac_ptr->amount_added>0) {
    #####:  151:				printf("      signature: %32.32s\n",gcac_ptr->actual_signature);
    #####:  152:			}
    #####:  153:		}
        2:  154:		else if (gcrd_ptr->type_of_record == 2) {
    #####:  155:			printf("      record_type: message\n");
    #####:  156:			printf("      message: %s\n",(char *)gcrd_ptr->actual_record);
    #####:  157:		}
        2:  158:		else if (gcrd_ptr->type_of_record == 3) {
        1:  159:            gcp_ptr = gcrd_ptr->actual_record;
        -:  160:
        -:  161:            // CHECK IF NULL TEMRINATED OR EXIT
        1:  162:            check_null_terminated_or_exit(gcp_ptr->message);
        1:  163:			printf("      record_type: animated message\n");
        -:  164:            // BDG: Hmm... is message guaranteed to be null-terminated?
        1:  165:            printf("      message: %s\n", gcp_ptr->message);
        1:  166:            printf("  [running embedded program]  \n");
        1:  167:            animate(gcp_ptr->message, gcp_ptr->program);
        1:  168:		}
    #####:  169:	}
        1:  170:	printf("  Total value: %d\n\n",get_gift_card_value(thisone));
        1:  171:}
        -:  172:
        -:  173:// Added to support web functionalities
    #####:  174:void gift_card_json(struct this_gift_card *thisone) {
        -:  175:    struct gift_card_data *gcd_ptr;
        -:  176:    struct gift_card_record_data *gcrd_ptr;
        -:  177:    struct gift_card_amount_change *gcac_ptr;
    #####:  178:    gcd_ptr = thisone->gift_card_data;
    #####:  179:    printf("{\n");
    #####:  180:    printf("  \"merchant_id\": \"%32.32s\",\n", gcd_ptr->merchant_id);
    #####:  181:    printf("  \"customer_id\": \"%32.32s\",\n", gcd_ptr->customer_id);
    #####:  182:    printf("  \"total_value\": %d,\n", get_gift_card_value(thisone));
    #####:  183:    printf("  \"records\": [\n");
    #####:  184:	for(int i=0;i<gcd_ptr->number_of_gift_card_records; i++) {
    #####:  185:        gcrd_ptr = (struct gift_card_record_data *) gcd_ptr->gift_card_record_data[i];
    #####:  186:        printf("    {\n");
    #####:  187:        if (gcrd_ptr->type_of_record == 1) {
    #####:  188:            printf("      \"record_type\": \"amount_change\",\n");
    #####:  189:            gcac_ptr = gcrd_ptr->actual_record;
    #####:  190:            printf("      \"amount_added\": %d,\n",gcac_ptr->amount_added);
    #####:  191:            if (gcac_ptr->amount_added>0) {
    #####:  192:                printf("      \"signature\": \"%32.32s\"\n",gcac_ptr->actual_signature);
    #####:  193:            }
    #####:  194:        }
    #####:  195:        else if (gcrd_ptr->type_of_record == 2) {
    #####:  196:			printf("      \"record_type\": \"message\",\n");
    #####:  197:			printf("      \"message\": \"%s\"\n",(char *)gcrd_ptr->actual_record);
    #####:  198:        }
    #####:  199:        else if (gcrd_ptr->type_of_record == 3) {
    #####:  200:            struct gift_card_program *gcp = gcrd_ptr->actual_record;
    #####:  201:			printf("      \"record_type\": \"animated message\",\n");
    #####:  202:			printf("      \"message\": \"%s\",\n",gcp->message);
        -:  203:            // programs are binary so we will hex for the json
    #####:  204:            char *hexchars = "01234567890abcdef";
        -:  205:            char program_hex[512+1];
    #####:  206:            program_hex[512] = '\0';
        -:  207:            int i;
    #####:  208:            for(i = 0; i < 256; i++) {
    #####:  209:                program_hex[i*2] = hexchars[((gcp->program[i] & 0xf0) >> 4)];
    #####:  210:                program_hex[i*2+1] = hexchars[(gcp->program[i] & 0x0f)];
    #####:  211:            }
    #####:  212:			printf("      \"program\": \"%s\"\n",program_hex);
    #####:  213:        }
    #####:  214:        if (i < gcd_ptr->number_of_gift_card_records-1)
    #####:  215:            printf("    },\n");
        -:  216:        else
    #####:  217:            printf("    }\n");
    #####:  218:    }
    #####:  219:    printf("  ]\n");
    #####:  220:    printf("}\n");
    #####:  221:}
        -:  222:
        -:  223:
        1:  224:struct this_gift_card *gift_card_reader(FILE *input_fd) {
        -:  225:
        1:  226:	struct this_gift_card *ret_val = malloc(sizeof(struct this_gift_card));
        -:  227:
        -:  228:    
        -:  229: 
        -:  230:
        -:  231:    void *optr;
        -:  232:	void *ptr;
        -:  233:
        -:  234:	// Loop to do the whole file
        2:  235:	while (!feof(input_fd)) {
        -:  236:
        -:  237:		struct gift_card_data *gcd_ptr;
        -:  238:		/* JAC: Why aren't return types checked? */
        1:  239:		fread(&ret_val->num_bytes, 4,1, input_fd);
        -:  240:
        -:  241:        // FIX FOR CRASH 1
        1:  242:        if (ret_val->num_bytes < 0) { 
    #####:  243:           exit(1);
        -:  244:        }
        -:  245:		// Make something the size of the rest and read it in
        1:  246:		ptr = malloc(ret_val->num_bytes);
        1:  247:		fread(ptr, ret_val->num_bytes, 1, input_fd);
        -:  248:
        1:  249:        optr = ptr-4;
        -:  250:
        1:  251:		gcd_ptr = ret_val->gift_card_data = malloc(sizeof(struct gift_card_data));
        1:  252:		gcd_ptr->merchant_id = ptr;
        1:  253:		ptr += 32;
        -:  254://		printf("VD: %d\n",(int)ptr - (int) gcd_ptr->merchant_id);
        1:  255:		gcd_ptr->customer_id = ptr;
        1:  256:		ptr += 32;
        -:  257:		/* JAC: Something seems off here... */
        1:  258:		gcd_ptr->number_of_gift_card_records = *((char *)ptr);
        1:  259:		ptr += 4;
        -:  260:
        1:  261:		gcd_ptr->gift_card_record_data = (void *)malloc(gcd_ptr->number_of_gift_card_records*sizeof(void*));
        -:  262:
        -:  263:		// Now ptr points at the gift card record data
        2:  264:		for (int i=0; i < gcd_ptr->number_of_gift_card_records; i++){
        -:  265:			//printf("i: %d\n",i);
        -:  266:			struct gift_card_record_data *gcrd_ptr;
        1:  267:			gcrd_ptr = gcd_ptr->gift_card_record_data[i] = malloc(sizeof(struct gift_card_record_data));
        -:  268:			struct gift_card_amount_change *gcac_ptr;
        1:  269:			gcac_ptr = gcrd_ptr->actual_record = malloc(sizeof(struct gift_card_record_data));
        -:  270:            struct gift_card_program *gcp_ptr;
        1:  271:			gcp_ptr = malloc(sizeof(struct gift_card_program));
        -:  272:
        1:  273:			gcrd_ptr->record_size_in_bytes = *((char *)ptr);
        -:  274:            //printf("rec at %x, %d bytes\n", ptr - optr, gcrd_ptr->record_size_in_bytes);
        1:  275:			ptr += 4;
        -:  276:			//printf("record_data: %d\n",gcrd_ptr->record_size_in_bytes);
        1:  277:			gcrd_ptr->type_of_record = *((char *)ptr);
        1:  278:			ptr += 4;
        -:  279:            //printf("type of rec: %d\n", gcrd_ptr->type_of_record);
        -:  280:
        -:  281:			// amount change
        1:  282:			if (gcrd_ptr->type_of_record == 1) {
    #####:  283:				gcac_ptr->amount_added = *((int*) ptr);
    #####:  284:				ptr += 4;
        -:  285:
        -:  286:				// don't need a sig if negative
        -:  287:				/* JAC: something seems off here */
    #####:  288:				if (gcac_ptr < 0) break;
        -:  289:
    #####:  290:				gcac_ptr->actual_signature = ptr;
    #####:  291:				ptr+=32;
    #####:  292:			}
        -:  293:			// message
        1:  294:			if (gcrd_ptr->type_of_record == 2) {
    #####:  295:				gcrd_ptr->actual_record = ptr;
        -:  296:				// advance by the string size + 1 for nul
        -:  297:                // BDG: does not seem right
    #####:  298:				ptr=ptr+strlen((char *)gcrd_ptr->actual_record)+1;
    #####:  299:			}
        -:  300:            // BDG: gift cards can run code?? Might want to check this one carefully...
        -:  301:            // text animatino (BETA)
        1:  302:            if (gcrd_ptr->type_of_record == 3) {
        1:  303:                gcp_ptr->message = malloc(32);
        1:  304:                gcp_ptr->program = malloc(256);
        1:  305:                memcpy(gcp_ptr->message, ptr, 32);
        1:  306:                ptr+=32;
        1:  307:                memcpy(gcp_ptr->program, ptr, 256);
        1:  308:                ptr+=256;
        1:  309:                gcrd_ptr->actual_record = gcp_ptr;
        1:  310:            }
        -:  311:
        1:  312:            if (gcrd_ptr->type_of_record > 3) {
    #####:  313:                printf("unknown record type: %d\n", gcrd_ptr->type_of_record);
    #####:  314:                exit(1);
        -:  315:            }
        1:  316:		}
        -:  317:	}
        1:  318:	return ret_val;
        -:  319:}
        -:  320:
        -:  321:struct this_gift_card *thisone;
        -:  322:
        1:  323:int main(int argc, char **argv) {
        1:  324:    if (argc != 3) {
    #####:  325:        fprintf(stderr, "usage: %s <1|2> file.gft\n", argv[0]);
    #####:  326:        fprintf(stderr, "  - Use 1 for text output, 2 for JSON output\n");
    #####:  327:        return 1;
        -:  328:    }
        1:  329:	FILE *input_fd = fopen(argv[2],"r");
        1:  330:    if (!input_fd) {
    #####:  331:        fprintf(stderr, "error opening file\n");
    #####:  332:        return 1;
        -:  333:    }
        1:  334:	thisone = gift_card_reader(input_fd);
        1:  335:	if (argv[1][0] == '1') print_gift_card_info(thisone);
    #####:  336:    else if (argv[1][0] == '2') gift_card_json(thisone);
        -:  337:
        1:  338:	return 0;
        1:  339:}
